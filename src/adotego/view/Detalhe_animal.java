package adotego.view;

import adotego.controller.AnimalController;
import adotego.controller.EspecieController;
import adotego.controller.RacaController;
import adotego.modelos.Animal;
import adotego.modelos.Especie;
import adotego.modelos.Porte_enum;
import adotego.modelos.Raca;
import adotego.util.FontHelper;
import adotego.util.Formatador;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author tmichelini
 */
public class Detalhe_animal extends javax.swing.JFrame {

    Tabela_Animais model_animais;
    private Animal animal;
    private Formatador formatador;

    /**
     * Creates new form Detalhe_animal
     */
    public Detalhe_animal() {
        try {
            initComponents();
            formatador = new Formatador();
            
            this.setLocationRelativeTo(null);
            configurar_tabela();
            initJComboBox_especie();
            initJComboPorte();            
            construir_animal();
           configurarFontes();

        } catch (SQLException ex) {
            Logger.getLogger(Detalhe_animal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrameCadastro = new javax.swing.JInternalFrame();
        label_configuracoes = new javax.swing.JLabel();
        jLabel_nome = new javax.swing.JLabel();
        jLabelEspecie = new javax.swing.JLabel();
        jLabel_raca = new javax.swing.JLabel();
        jLabel_porte = new javax.swing.JLabel();
        jLabel_descricao = new javax.swing.JLabel();
        txt_nome_animal = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_descricao = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_animal = new javax.swing.JTable();
        btn_add_animal = new javax.swing.JButton();
        jComboBox_especie = new javax.swing.JComboBox<>();
        jComboBox_raca = new javax.swing.JComboBox<>();
        jComboBox_porte = new javax.swing.JComboBox<>();
        jToolBar1 = new javax.swing.JToolBar();
        btn_salvar_animal = new javax.swing.JButton();
        btn_excluir = new javax.swing.JButton();
        btn_gerar_adocao = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jInternalFrameCadastro.setBackground(new java.awt.Color(255, 255, 255));
        jInternalFrameCadastro.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jInternalFrameCadastro.setTitle("Cadastro de Animais\n");
        jInternalFrameCadastro.setVisible(true);

        label_configuracoes.setFont(new java.awt.Font("Waree", 0, 18)); // NOI18N
        label_configuracoes.setText("Configurações de animal");

        jLabel_nome.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel_nome.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_nome.setText("Nome");

        jLabelEspecie.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabelEspecie.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelEspecie.setText("Especie");

        jLabel_raca.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel_raca.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_raca.setText("Raça");

        jLabel_porte.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel_porte.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_porte.setText("Porte");

        jLabel_descricao.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel_descricao.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_descricao.setText("Descrição");

        txt_nome_animal.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        txt_nome_animal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_nome_animalFocusLost(evt);
            }
        });

        txt_descricao.setColumns(20);
        txt_descricao.setRows(5);
        txt_descricao.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        txt_descricao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_descricaoFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(txt_descricao);

        jTable_animal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable_animal);

        btn_add_animal.setBackground(new java.awt.Color(255, 255, 255));
        btn_add_animal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/left-arrow.png"))); // NOI18N
        btn_add_animal.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        btn_add_animal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_animalActionPerformed(evt);
            }
        });

        jComboBox_especie.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox_especie.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_especieItemStateChanged(evt);
            }
        });
        jComboBox_especie.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jComboBox_especieFocusLost(evt);
            }
        });

        jComboBox_raca.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox_raca.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jComboBox_racaFocusLost(evt);
            }
        });

        jComboBox_porte.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox_porte.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jComboBox_porteFocusLost(evt);
            }
        });

        jToolBar1.setRollover(true);

        btn_salvar_animal.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btn_salvar_animal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/plus.png"))); // NOI18N
        btn_salvar_animal.setText("Salvar");
        btn_salvar_animal.setFocusable(false);
        btn_salvar_animal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_salvar_animal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_salvar_animal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_salvar_animalActionPerformed(evt);
            }
        });
        jToolBar1.add(btn_salvar_animal);

        btn_excluir.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btn_excluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cross.png"))); // NOI18N
        btn_excluir.setText("Excluir");
        btn_excluir.setFocusable(false);
        btn_excluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_excluir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_excluirActionPerformed(evt);
            }
        });
        jToolBar1.add(btn_excluir);

        btn_gerar_adocao.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btn_gerar_adocao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/animal-paw-print.png"))); // NOI18N
        btn_gerar_adocao.setText("Gerar Adoção");
        btn_gerar_adocao.setFocusable(false);
        btn_gerar_adocao.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_gerar_adocao.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btn_gerar_adocao);

        jToolBar2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar2.setRollover(true);

        jButton2.setToolTipText("Excluir");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jButton2);

        javax.swing.GroupLayout jInternalFrameCadastroLayout = new javax.swing.GroupLayout(jInternalFrameCadastro.getContentPane());
        jInternalFrameCadastro.getContentPane().setLayout(jInternalFrameCadastroLayout);
        jInternalFrameCadastroLayout.setHorizontalGroup(
            jInternalFrameCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrameCadastroLayout.createSequentialGroup()
                .addGroup(jInternalFrameCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrameCadastroLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jInternalFrameCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrameCadastroLayout.createSequentialGroup()
                                .addComponent(jLabel_descricao, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jInternalFrameCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(139, 139, 139))
                            .addGroup(jInternalFrameCadastroLayout.createSequentialGroup()
                                .addGroup(jInternalFrameCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jInternalFrameCadastroLayout.createSequentialGroup()
                                        .addComponent(jLabel_porte, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox_porte, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jInternalFrameCadastroLayout.createSequentialGroup()
                                        .addComponent(jLabel_raca, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox_raca, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jInternalFrameCadastroLayout.createSequentialGroup()
                                        .addComponent(jLabelEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox_especie, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jInternalFrameCadastroLayout.createSequentialGroup()
                                        .addComponent(jLabel_nome, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txt_nome_animal, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_add_animal, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jInternalFrameCadastroLayout.createSequentialGroup()
                        .addGap(309, 309, 309)
                        .addComponent(label_configuracoes, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jInternalFrameCadastroLayout.setVerticalGroup(
            jInternalFrameCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrameCadastroLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(label_configuracoes)
                .addGap(46, 46, 46)
                .addGroup(jInternalFrameCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jInternalFrameCadastroLayout.createSequentialGroup()
                        .addGroup(jInternalFrameCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_nome)
                            .addComponent(txt_nome_animal, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jInternalFrameCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelEspecie)
                            .addComponent(jComboBox_especie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jInternalFrameCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_raca)
                            .addComponent(jComboBox_raca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jInternalFrameCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_add_animal, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jInternalFrameCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel_porte)
                                .addComponent(jComboBox_porte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jInternalFrameCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_descricao)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrameCadastroLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jInternalFrameCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrameCadastro, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_add_animalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_animalActionPerformed
        int id_seleted = model_animais.getIdIntoTheRow(jTable_animal);
        Animal animal_selected = null;

        animal_selected = new AnimalController().find(id_seleted);
        preencherCampos(animal_selected);


    }//GEN-LAST:event_btn_add_animalActionPerformed

    private void btn_salvar_animalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_salvar_animalActionPerformed
        txt_nome_animalFocusLost(null);
        jComboBox_especieFocusLost(null);
        jComboBox_porteFocusLost(null);
        jComboBox_racaFocusLost(null);
        txt_descricaoFocusLost(null);
      
        try {
            if (animal.getId() == 0) {
                animal.setData_entrada(Calendar.getInstance());
                new adotego.controller.AnimalController().save(animal);
                resetCampos();
                model_animais.atualizarTabela();
            } else {
                new adotego.controller.AnimalController().update(animal);
                model_animais.atualizarTabela();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Detalhe_animal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_salvar_animalActionPerformed

    private void txt_nome_animalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_nome_animalFocusLost
        animal.setNome(txt_nome_animal.getText());
    }//GEN-LAST:event_txt_nome_animalFocusLost

    private void jComboBox_racaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox_racaFocusLost
        try {
            Raca raca = new RacaController().getByName(String.valueOf(jComboBox_raca.getSelectedItem()));
            animal.setRaca(raca);

        } catch (SQLException ex) {
            Logger.getLogger(Detalhe_animal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jComboBox_racaFocusLost

    private void jComboBox_porteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox_porteFocusLost
        Porte_enum[] portes = Porte_enum.values();
        for (Porte_enum porte : portes) {
            if (String.valueOf(porte)
                    .equals(String.valueOf(jComboBox_porte.getSelectedItem()))) {
                animal.setPorte(porte);
            }
        }
    }//GEN-LAST:event_jComboBox_porteFocusLost

    private void txt_descricaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_descricaoFocusLost
        animal.setDescricao(txt_descricao.getText());
    }//GEN-LAST:event_txt_descricaoFocusLost

    private void jComboBox_especieFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox_especieFocusLost
        try {
            String especie_selected = String.valueOf(jComboBox_especie.getSelectedItem());
            Especie especie = new EspecieController().getByName(especie_selected);

            animal.setEspecie(especie);

        } catch (SQLException ex) {
            Logger.getLogger(Detalhe_animal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBox_especieFocusLost

    private void jComboBox_especieItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_especieItemStateChanged
        try {
            String especie_selected = String.valueOf(jComboBox_especie.getSelectedItem());
            List<Raca> lista_raca = new RacaController().findRacaByEspecieName(especie_selected);
            initJComboBox_raca(lista_raca);
        } catch (SQLException ex) {
            Logger.getLogger(Detalhe_animal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBox_especieItemStateChanged

    private void btn_excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_excluirActionPerformed
        if (animal.getId() == 0) {

        } else {
            new AnimalController().delete(animal.getId());
            model_animais.atualizarTabela();
            resetCampos();
        }
    }//GEN-LAST:event_btn_excluirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Detalhe_animal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Detalhe_animal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Detalhe_animal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Detalhe_animal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Detalhe_animal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add_animal;
    private javax.swing.JButton btn_excluir;
    private javax.swing.JButton btn_gerar_adocao;
    private javax.swing.JButton btn_salvar_animal;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox_especie;
    private javax.swing.JComboBox<String> jComboBox_porte;
    private javax.swing.JComboBox<String> jComboBox_raca;
    private javax.swing.JInternalFrame jInternalFrameCadastro;
    private javax.swing.JLabel jLabelEspecie;
    private javax.swing.JLabel jLabel_descricao;
    private javax.swing.JLabel jLabel_nome;
    private javax.swing.JLabel jLabel_porte;
    private javax.swing.JLabel jLabel_raca;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable_animal;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JLabel label_configuracoes;
    private javax.swing.JTextArea txt_descricao;
    private javax.swing.JTextField txt_nome_animal;
    // End of variables declaration//GEN-END:variables

    private void initJComboBox_especie() throws SQLException {
        List<Especie> especies = new EspecieController().findAll();
        jComboBox_especie.removeAllItems();
        for (Especie especie : especies) {
            jComboBox_especie.addItem(formatador
                    .formatarPrimeiraLetraMaiuscula(especie.getNome()));
        }

    }

    private void initJComboBox_raca(List<Raca> lista_raca) {
        jComboBox_raca.removeAllItems();
        for (Raca raca : lista_raca) {
            jComboBox_raca.addItem(formatador
                    .formatarPrimeiraLetraMaiuscula(raca.getNome()));
        }

    }

    private void initJComboPorte() {
        Porte_enum[] portes = Porte_enum.values();
        for (Porte_enum porte : portes) {
            jComboBox_porte.addItem(formatador
                    .formatarPrimeiraLetraMaiuscula(String.valueOf(porte)));
        }
    }

    private Porte_enum getPorte(String porte_str) {
        String porte = porte_str.toLowerCase();
        switch (porte) {
            case "pequeno":
                return Porte_enum.PEQUENO;
            case "medio":
                return Porte_enum.MEDIO;
            case "grande":
                return Porte_enum.GRANDE;
            default:
                return Porte_enum.MEDIO;
        }
    }

    private void preencherCampos(Animal animal) {
        this.animal = animal;
        txt_nome_animal.setText(animal.getNome());
        txt_descricao.setText(animal.getDescricao());
        jComboBox_porte.setSelectedItem(String.valueOf(animal.getPorte()));
        jComboBox_especie.setSelectedItem(animal.getEspecie().getNome());
        jComboBox_raca.setSelectedItem(animal.getRaca().getNome());

    }

    private void resetCampos() {
        txt_nome_animal.setText("");
        jComboBox_especie.setSelectedIndex(0);
        jComboBox_porte.setSelectedIndex(0);
        jComboBox_raca.setSelectedIndex(0);
        txt_descricao.setText("");
        this.animal = new Animal();
        this.animal.setId(0);
    }

    public void build(Animal a) {
        this.animal = a;
        preencherCampos(animal);
        this.setVisible(true);
    }

   
    
    public void configurar_tabela() throws SQLException{
        
         model_animais = new Tabela_Animais();
         jTable_animal.setModel(model_animais);
        
         int columnCount = jTable_animal.getColumnCount();         
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.CENTER);
        jTable_animal.setRowHeight(26);
        int width = jTable_animal.getWidth();
        for (int i = 0; i < columnCount; i++) {
            TableColumn column = jTable_animal.getColumnModel().getColumn(i);
            column.setCellRenderer(dtcr);
            switch (i) {
                case 0:
                    column.setPreferredWidth(Integer
                            .parseInt(String.valueOf(Math.round(width*0.10))));
                    break;
                case 1:
                    column.setPreferredWidth(Integer
                            .parseInt(String.valueOf(Math.round(width*0.30))));
                    break;
                case 2:
                    column.setPreferredWidth(Integer
                            .parseInt(String.valueOf(Math.round(width*0.15))));
                    break;
                case 3:
                    column.setPreferredWidth(Integer
                            .parseInt(String.valueOf(Math.round(width*0.30))));
                    break;
                case 4:
                    column.setPreferredWidth(Integer
                            .parseInt(String.valueOf(Math.round(width*0.15))));
                    
            }
            
        }
    }

    private void construir_animal() {
       animal = new Animal();
    }

    private void configurarFontes() {
        FontHelper fh = new adotego.util.FontHelper();
        
        jLabelEspecie.setFont(fh.getLatoRegular(14f));
        jLabel_descricao.setFont(fh.getLatoRegular(14f));
        jLabel_nome.setFont(fh.getLatoRegular(14f));
        jLabel_porte.setFont(fh.getLatoRegular(14f));
        label_configuracoes.setFont(fh.getLatoBold(19f));
        jTable_animal.setFont(fh.getLatoLight(16f));
        txt_descricao.setFont(fh.getLatoLight(14f));
        txt_nome_animal.setFont(fh.getLatoLight(14f));
        btn_add_animal.setFont(fh.getLatoBold(14f));
        btn_salvar_animal.setFont(fh.getLatoBold(14f));
        btn_excluir.setFont(fh.getLatoBold(14f));
        btn_gerar_adocao.setFont(fh.getLatoBold(14f));
        jComboBox_especie.setFont(fh.getLatoRegular(14f));
        jComboBox_porte.setFont(fh.getLatoRegular(14f));
        jComboBox_raca.setFont(fh.getLatoRegular(14f));
        jInternalFrameCadastro.getComponent(0).setFont(fh.getLatoBold(17f));
    }

}

class Tabela_Animais extends AbstractTableModel {

    private List<Animal> lista_animais;
    private String[] colunas = new String[]{"ID", "Nome"};

    public Tabela_Animais() throws SQLException {
        lista_animais = new AnimalController().findAll();
    }

    @Override
    public int getRowCount() {
        return lista_animais.size();
    }

    @Override
    public int getColumnCount() {
        return colunas.length;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Animal animal = lista_animais.get(rowIndex);

        switch (columnIndex) {
            case 0:
                return animal.getId();
            case 1:
                return animal.getNome();

            default:
                return "Não foi possível identificar a colunas";
        }
    }

    @Override
    public String getColumnName(int column) {
        return colunas[column];
    }

    public int getIdIntoTheRow(JTable table) {
        int row = table.getSelectedRow();
        String val = String.valueOf(table.getValueAt(row, 0));
        return Integer.parseInt(val);
    }

    void atualizarTabela() {

        lista_animais = new AnimalController().findAll();
        this.fireTableDataChanged();

    }

}
